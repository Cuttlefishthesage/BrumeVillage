
(deftype mount-part (part-spawner) ())

(defpart 3853
  :init-specs
  ((:texture (hotdot effects))
   (:num 0.1)
   (:x (meters -70) (meters 100))
   (:y (meters 3.5) (meters 4))
   (:z (meters -30) (meters 52.5))
   (:scale-x (meters 0.5))
   (:scale-y :copy scale-x)
   (:r 40.0)
   (:g 255.0)
   (:b 0.0)
   (:a 0.0)
   (:vel-x (meters -0.005) 1 (meters 0.01))
   (:vel-y (meters 0.0013333333))
   (:vel-z (meters -0.005) 1 (meters 0.01))
   (:fade-a 0.85333335)
   (:timer (seconds 11))
   (:flags (bit2))
   (:next-time (seconds 0.5))
   (:next-launcher 3854)))

(defpart 3854
  :init-specs
  ((:scalevel-x (meters 0))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.0)
   (:fade-g 0.0)
   (:fade-a 0.0)
   (:accel-y (meters -0.000050000002))
   (:next-time (seconds 2))
   (:next-launcher 3855)))

(defpart 3855
  :init-specs
  ((:scalevel-x (meters -0.0023333333))
   (:scalevel-y :copy scalevel-x)
   (:fade-r -0.64)
   (:fade-g -0.85333335)
   (:accel-y (meters 0.000050000002))
   (:next-time (seconds 0.5))
   (:next-launcher 3856)))

(defpart 3856
  :init-specs
  ((:scalevel-x (meters 0))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.0)
   (:fade-g 0.0)
   (:next-time (seconds 1))
   (:next-launcher 3857)))

(defpart 3857
  :init-specs
  ((:scalevel-x (meters 0.0023333333))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.64)
   (:fade-g 0.85333335)
   (:next-time (seconds 0.5))
   (:next-launcher 3858)))

(defpart 3858
  :init-specs
  ((:scalevel-x (meters 0))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.0)
   (:fade-g 0.0)
   (:fade-a 0.0)
   (:accel-y (meters -0.000050000002))
   (:next-time (seconds 1))
   (:next-launcher 3859)))

(defpart 3859
  :init-specs
  ((:scalevel-x (meters -0.0023333333))
   (:scalevel-y :copy scalevel-x)
   (:fade-r -0.64)
   (:fade-g -0.85333335)
   (:accel-y (meters 0.000050000002))
   (:next-time (seconds 0.5))
   (:next-launcher 3860)))

(defpart 3860
  :init-specs
  ((:scalevel-x (meters 0))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.0)
   (:fade-g 0.0)
   (:next-time (seconds 1))
   (:next-launcher 3861)))

(defpart 3861
  :init-specs
  ((:scalevel-x (meters 0.0023333333))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.64)
   (:fade-g 0.85333335)
   (:next-time (seconds 0.5))
   (:next-launcher 3862)))

(defpart 3862
  :init-specs
  ((:scalevel-x (meters 0))
   (:scalevel-y :copy scalevel-x)
   (:fade-r 0.0)
   (:fade-g 0.0)
   (:fade-a 0.0)
   (:accel-y (meters -0.000050000002))
   (:next-time (seconds 2))
   (:next-launcher 3863)))

(defpart 3863
  :init-specs ((:scalevel-x (meters 0)) (:scalevel-y :copy scalevel-x) (:fade-r 0.0) (:fade-g 0.0) (:fade-a -0.8)))

(defpart 3864
  :init-specs
  ((:texture (flare effects))
   (:num 0.02)
   (:x (meters -55) (meters 75))
   (:y (meters 28))
   (:z (meters -35) (meters 60))
   (:scale-x (meters 15) (meters 15))
   (:rot-x 4)
   (:rot-z (degrees -120) (degrees 20))
   (:scale-y (meters 2) (meters 2))
   (:r 40.0)
   (:g 255.0)
   (:b 0.0 128.0)
   (:a 0.0)
   (:scalevel-x (meters 0.0007324219))
   (:rotvel-z (degrees -0.0033333332) (degrees 0.0066666664))
   (:scalevel-y (meters 0.0007324219))
   (:fade-a 0.02)
   (:timer (seconds 8))
   (:flags (bit2 bit3 bit14))
   (:next-time (seconds 4))
   (:next-launcher 3865)
   (:rotate-y (degrees 0))))

(defpart 3865
  :init-specs ((:fade-a -0.02)))

(defpartgroup group-mount-dapple-light-1
  :id 784 ;; id changed to test for crashes
  :bounds (static-bspherem 0 0 0 55)
  :parts
  (
   (sp-item 3853 :fade-after (meters 130) :falloff-to (meters 160) :hour-mask #b0000000000000000000000000)))

;;waterfall;;

(defpartgroup group-mount-waterfall-1
  :id 753 ;; id changed to test for crashes
  :flags (always-draw)
  :bounds (static-bspherem 0 16 0 32)
  :parts
  ((sp-item 3000 :fade-after (meters 160) :falloff-to (meters 160))
   ))

(defpart 3000
  :init-specs
  ((:texture (new 'static 'texture-id :index #x18 :page #x2))
   (:num 20.9)
   (:x (meters -20) (meters 11))
   (:y (meters 47))
   (:z (meters -12) (meters 27))
   (:scale-x (meters 2.4) (meters 1.6))
   (:scale-y (meters 1.2) (meters 0.8))
   (:r 192.0)
   (:g 192.0)
   (:b 192.0)
   (:a 32.0 16.0)
   (:vel-x (meters 0.05)) 
   (:vel-y (meters 0.013333334) (meters 0.013333334))
   (:vel-z (meters -0.0016666667) (meters 0.0033333334))
   (:scalevel-x (meters 0.0073242188))
   (:scalevel-y (meters 0.029296875))
   (:accel-x (meters -0.00091074686))
   (:accel-y (meters -0.0036666668) (meters -0.00066666666))
   (:timer (seconds 1.28))
   (:flags (bit2))
   (:next-time (seconds 1.23))
   (:launchrot-x (degrees -15) (degrees 30))
   (:rotate-y (degrees 90))))
;;elevator;;

(defskelgroup *mount-exit-plat-sg*
  citb-exit-plat
  citb-exit-plat-lod0-jg
  citb-exit-plat-idle-ja
  ((citb-exit-plat-lod0-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 30))

(deftype mount-exit-plat (plat-button)
  ((idle-height float)
   (rise-height float)
   (activated   symbol)
   (teleport-if-below-y          float)
   (teleport-if-above-y          float))
  (:states
   mount-exit-plat-idle
   mount-exit-plat-rise))

(defmethod can-activate? ((this mount-exit-plat))
  (and ((method-of-type plat-button can-activate?) this) (task-complete? *game-info* (game-task mount-platformbutton))))

(defmethod should-teleport? ((this mount-exit-plat))
  (let ((f0-0 (-> (camera-pos) y)))
    (case (-> this path-pos)
      ((0.0) (if (< f0-0 (-> this teleport-if-below-y)) (return #t)))
      ((1.0) (if (< (-> this teleport-if-above-y) f0-0) (return #t)))))
  #f)

(defstate mount-exit-plat-idle (mount-exit-plat)
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('trigger)
         (let ((v1-3 (-> self entity extra perm)))
           (logior! (-> v1-3 status) (entity-perm-status user-set-from-cstage))
           (set! (-> v1-3 user-int8 0) 1))
         (go mount-exit-plat-rise))))
  :code
    (behavior ()
      (logior! (-> self draw status) (draw-status hidden))
      (clear-collide-with-as (-> self root))
      (loop
        (suspend))))

(defstate mount-exit-plat-rise (mount-exit-plat)
  :trans rider-trans
  :code
    (behavior ()
      (logclear! (-> self draw status) (draw-status hidden))
      (restore-collide-with-as (-> self root))
      (set-time! (-> self state-time))
      (loop
        (let ((f30-0 (- 1.0 (* 0.0016666667 (the float (- (current-time) (-> self state-time)))))))
          (when (< f30-0 0.0)
            (set! (-> self root trans y) (-> self rise-height))
            (go-virtual plat-button-idle))
          (set! (-> self root trans y) (lerp (-> self rise-height) (-> self idle-height) (* f30-0 f30-0))))
        (suspend)))
  :post rider-post)

(defbehavior mount-exit-plat-move-player mount-exit-plat ((arg0 vector))
  (let ((gp-0 (new 'stack-no-clear 'vector)))
    (let ((s5-0 (new 'stack-no-clear 'vector)))
      (vector-! gp-0 (-> self root trans) arg0)
      (vector-! s5-0 (-> *target* control trans) (-> self root trans))
      (set! (-> s5-0 y) 0.0)
      (let ((f30-0 (vector-length s5-0)))
        (when (< 122880.0 f30-0)
          (vector-normalize! s5-0 1.0)
          (vector+*! gp-0 gp-0 s5-0 (- 122880.0 f30-0)))))
    (move-by-vector! (-> *target* control) gp-0))
  (send-event *target* 'reset-height)
  0
  (none))

(defstate plat-button-move-downward (mount-exit-plat)
  :virtual #t
  :trans
    (behavior ()
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (set! (-> gp-0 quad) (-> self root trans quad))
        (let ((t9-1 (-> (the-as (state plat-button) (find-parent-state)) trans))) (if t9-1 (t9-1)))
        (mount-exit-plat-move-player gp-0)))
  :post transform-post)

(defstate plat-button-move-upward (mount-exit-plat)
  :virtual #t
  :trans
    (behavior ()
      (let ((gp-0 (new 'stack-no-clear 'vector)))
        (set! (-> gp-0 quad) (-> self root trans quad))
        (let ((t9-1 (-> (the-as (state plat-button) (find-parent-state)) trans))) (if t9-1 (t9-1)))
        (mount-exit-plat-move-player gp-0)))
  :post transform-post)


(defmethod plat-button-method-31 ((this mount-exit-plat))
  (initialize-skeleton this *mount-exit-plat-sg* '())
  (none))

(defmethod plat-button-method-32 ((this mount-exit-plat))
  (if (-> this activated) (go (method-of-object this plat-button-idle)) (go mount-exit-plat-idle))
  0
  (none))

(defmethod plat-button-method-28 ((this mount-exit-plat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 2) 0)))
      (set! (-> s4-0 prim-core collide-as) (collide-kind ground-object))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid rider-plat-sticky))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 122880.0)
      (set-root-prim! s5-0 s4-0)
      (let ((s3-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 1))))
        (set! (-> s3-0 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s3-0 collide-with) (collide-kind target))
        (set! (-> s3-0 prim-core action) (collide-action solid rider-plat-sticky))
        (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
        (set! (-> s3-0 transform-index) 4)
        (set-vector! (-> s3-0 local-sphere) 0.0 -2867.2 0.0 7372.8)
        (append-prim s4-0 s3-0))
      (let ((s3-1 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 1) (the-as uint 2))))
        (set! (-> s3-1 prim-core collide-as) (collide-kind ground-object))
        (set! (-> s3-1 collide-with) (collide-kind target))
        (set! (-> s3-1 prim-core action) (collide-action solid rider-plat-sticky))
        (set! (-> s3-1 prim-core offense) (collide-offense indestructible))
        (set! (-> s3-1 transform-index) 3)
        (set-vector! (-> s3-1 local-sphere) 0.0 0.0 0.0 122880.0)
        (append-prim s4-0 s3-1)))
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0)
    s5-0))

(defmethod can-target-move? ((this mount-exit-plat))
  (process-entity-status! this (entity-perm-status bit-7) #t)
  (logclear! (-> this mask) (process-mask actor-pause))
  (set! (-> this draw light-index) (the-as uint 255))
  (let ((s5-0 (-> this root trans)))
    (eval-path-curve! (-> this path) s5-0 (-> this path-pos) 'interp)
    (vector+! s5-0 s5-0 (-> this trans-off))
    (eval-path-curve! (-> this path) s5-0 0.4 'interp)
    (set! (-> this teleport-if-above-y) (-> s5-0 y))
    (eval-path-curve! (-> this path) s5-0 0.6 'interp)
    (set! (-> this teleport-if-below-y) (-> s5-0 y)))
  (set! (-> this rise-height) (-> this root trans y))
  (set! (-> this idle-height) (+ -286720.0 (-> this rise-height)))
  (set! (-> this allow-auto-kill) #f)
  (process-entity-status! this (entity-perm-status bit-3) #t)
  0
  (none))

  ;;doors;;
(deftype mount-maindoor (process-drawable)
  ((root   collide-shape :override)
   (thresh vector :inline))
  (:states (mount-maindoor-closed symbol)
   (mount-maindoor-open symbol)))


(defskelgroup *mount-maindoor-sg*
  maindoor
  maindoor-lod0-jg
  maindoor-idle-ja
  ((maindoor-lod0-mg (meters 20)) (maindoor-lod1-mg (meters 999999)))
  :bounds (static-spherem 0 0 0 7))

(defstate mount-maindoor-closed (mount-maindoor)
  :code
    (behavior ((arg0 symbol))
      (set! (-> self draw force-lod) 1)
      (logclear! (-> self draw status) (draw-status hidden))
      (if arg0 (ja :num-func num-func-identity :frame-num 0.0))
      (suspend)
      (update-transforms! (-> self root))
      (loop
        (when (or 
                  (and (and *target* (>= (-> self thresh w) (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                       ))
          (go mount-maindoor-open #f))
        (if (and *target* (>= (-> self thresh w) (vector-vector-distance (-> self root trans) (-> *target* control trans))))
          (level-hint-spawn (text-id sidekick-hint-rounddoor) "sksp0038" (the-as entity #f) *entity-pool* (game-task none)))
        (when (ja-min? 0)
          (set! (-> self root root-prim prim-core action) (collide-action solid))
          (set! (-> self root root-prim prim-core offense) (collide-offense indestructible)))
        (ja :num! (seek! 0.0))
        (ja-post)
        (suspend))))

(defstate mount-maindoor-open (mount-maindoor)
  :code
    (behavior ((arg0 symbol))
      (set! (-> self draw force-lod) 0)
      (logclear! (-> self draw status) (draw-status hidden))
      (process-entity-status! self (entity-perm-status complete) #t)
      (if arg0 (ja :num-func num-func-identity :frame-num max))
      (set! (-> self root root-prim prim-core action) (collide-action))
      (set! (-> self root root-prim prim-core offense) (collide-offense no-offense))
      (while (not (ja-max? 0))
        (ja :num! (seek! max 2.0))
        
        (suspend))
      (logior! (-> self draw status) (draw-status hidden))
      (loop
        (suspend)))
  :post ja-post)

(defmethod init-from-entity! ((this mount-maindoor) (arg0 entity-actor))
  (let ((s4-0 (new 'process 'collide-shape this (collide-list-enum hit-by-others))))
    (let ((s3-0 (new 'process 'collide-shape-prim-mesh s4-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s3-0 prim-core collide-as) (collide-kind wall-object))
      (set! (-> s3-0 collide-with) (collide-kind target))
      (set! (-> s3-0 prim-core action) (collide-action solid))
      (set! (-> s3-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s3-0 transform-index) 0)
      (set-vector! (-> s3-0 local-sphere) 0.0 0.0 0.0 24576.0)
      (set-root-prim! s4-0 s3-0))
    (set! (-> s4-0 nav-radius) (* 0.75 (-> s4-0 root-prim local-sphere w)))
    (backup-collide-with-as s4-0)
    (set! (-> this root) s4-0))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *mount-maindoor-sg* '())
  (update-transforms! (-> this root))
  (set! (-> this thresh w) 61440.0)
  (if (or (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
          (and (and *target* (>= (-> this thresh w) (vector-vector-distance (-> this root trans) (-> *target* control trans))))
               (send-event *target* 'query 'powerup (pickup-type eco-blue))))
    (go mount-maindoor-open #t)
    (go mount-maindoor-closed #t))
  (none))

;;;trainingcam;;;;
(defskelgroup *training-cam-sg* trainingcam trainingcam-lod0-jg -1
              ((trainingcam-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 80)
              )

;;button;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GENERIC BUTTON;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (deftype mount-switch (basebutton)
  ((fcell-handle handle)
  (door-anim-played? symbol)

  ))


(defmethod init-from-entity! ((this mount-switch) (arg0 entity-actor))
  (reset! this)
  (set! (-> this spawned-by-other?) #f)
  (set! (-> this button-id) -1)
  (set! (-> this fcell-handle) (the-as handle #f))
  (set! (-> this door-anim-played?) #f)
  (let ((v1-4 (res-lump-value (-> this entity) 'extra-id uint128 :default (the-as uint128 -1))))
    (if (>= (the-as int v1-4) 0) (set! (-> this button-id) (the-as int v1-4))))
  (when (or (res-lump-struct arg0 'next-actor structure) (res-lump-struct arg0 'prev-actor structure))
    (set! (-> this link) (new 'process 'actor-link-info this))
    (if (< (-> this button-id) 0) (set! (-> this button-id) (actor-count-before (-> this link)))))
  (basebutton-method-27 this)
  (process-drawable-from-entity! this arg0)
  (let ((v1-16 (task-complete? *game-info* (-> this entity extra perm task))))
  (set! (-> this down?) v1-16)
  )

  (set! (-> this notify-actor) (entity-actor-lookup arg0 'alt-actor 0))
  (set! (-> this timeout) (res-lump-float arg0 'timeout))
  (if (not (-> this spawned-by-other?)) (nav-mesh-connect this (-> this root) (the-as nav-control #f)))
  (arm-trigger-event! this)
  (basebutton-method-26 this)
  (go (method-of-object this basebutton-startup))
  (none))

(defstate basebutton-up-idle (mount-switch)
  :virtual #t
  :event
  (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('attack)
       (case (-> block param 1)
         (('flop)
          (basebutton-method-29 self (-> self event-going-down) (-> self notify-actor))
          (sound-play "silo-button")
          (go-virtual basebutton-going-down)
          (close-specific-task! (-> self entity extra perm task) (task-status need-resolution))
          (entity-task-complete-on (-> self entity))
          (when (and (task-complete? *game-info* (game-task mount-platformbutton)) (not (-> self door-anim-played?)) )
          (process-spawn pov-camera (static-vectorm -1879.20 182.95 237.64) *training-cam-sg* "orbcam" 5 #f '() :to self )
          (set! (-> self door-anim-played?) #t))
          )
         )
       )
      (('trigger)
       (sound-play "silo-button")
       (go-virtual basebutton-going-down)
       )
      (('move-to)
       (move-to-vec-or-quat! self (the-as vector (-> block param 0)) (the-as quaternion (-> block param 1)))
       )
      )
    )
  :enter
    (behavior ()
      (press! self #f))
  :trans
    (behavior ()
      (if (-> self move-to?)
        (rider-trans) ;; Probably need to clean up all this rider code later, it is not needed here.
        ))
  :code anim-loop
  :post
    (behavior ()
      (when (-> self move-to?)
        (set! (-> self move-to?) #f)
        (set! (-> self root trans quad) (-> self move-to-pos quad))
        (quaternion-copy! (-> self root quat) (-> self move-to-quat))
        (rider-post))))


;; RACE RING ;;
(deftype race-ring (process-drawable)
  ((rot-y                  float)
   (face-vec               vector         :inline)
   (part-track             handle)
   (keep-part-track-alive  symbol)
   (timeout                time-frame)
   (alt-actor              entity-actor)
   (alt-task               uint8)
   (cyl                    cylinder-flat  :inline)
   (old-hips               vector         :inline)
   )
  (:states
    race-ring-active
    race-ring-idle
    race-ring-wait
    )
  )


(defpartgroup group-rolling-ring
  :id 457
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1773 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1774 :fade-after (meters 80))
    (sp-item 1775 :flags (is-3d))
    (sp-item 1776 :flags (is-3d))
    )
  )

(defpart 1773
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 2.0 2.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1774
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:scale-x (meters 1) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1775
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:fade-a -8.533334)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
    )
  )

(defpart 1776
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
    )
  )

(defpartgroup group-rolling-spawn-ring
  :id 458
  :duration (seconds 0.017)
  :linger-duration (seconds 0.47)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1777 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1778 :flags (is-3d))
    (sp-item 1779 :flags (is-3d))
    )
  )

(defpart 1777
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 32.0)
    (:scale-x (meters 1) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:vel-y (meters 0.03))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:timer (seconds 0.5))
    (:flags (bit3))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1780)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 0))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1780
  :init-specs ((:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1780)
    )
  )

(defpart 1778
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1781)
    )
  )

(defpart 1781
  :init-specs ((:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1781)
    )
  )

(defpart 1779
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.08))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1782)
    )
  )

(defpart 1782
  :init-specs ((:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1782)
    )
  )

(defpartgroup group-rolling-explode-ring
  :id 459
  :duration (seconds 0.017)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1783 :fade-after (meters 100) :falloff-to (meters 100)) (sp-item 1784 :flags (is-3d)))
  )

(defpart 1783
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 64.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 64.0 1 64.0)
    (:g 0.0)
    (:b 64.0 1 64.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.1) (meters 0.033333335))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -0.85333335)
    (:friction 0.9)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1784
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 2.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 128.0 1 127.0)
    (:g 0.0)
    (:b 128.0 1 127.0)
    (:a 128.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.85333335)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    )
  )

(defun race-ring-set-particle-rotation-callback ((arg0 part-tracker))
  (let ((f0-0 (-> (the-as (pointer race-ring) (-> arg0 userdata)) 0 rot-y)))
    (set! (-> *part-id-table* 1773 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1774 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1775 init-specs 4 initial-valuef) (+ -182.04445 f0-0))
    (set! (-> *part-id-table* 1776 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1777 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1778 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1779 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1783 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1784 init-specs 4 initial-valuef) f0-0)
    )
  0
  (none)
  )

(defpartgroup group-rolling-ring-blue
  :id 460
  :linger-duration (seconds 0)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1785 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1786 :fade-after (meters 80))
    (sp-item 1787 :flags (is-3d))
    (sp-item 1788 :flags (is-3d))
    )
  )

(defpart 1785
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 2.0 2.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1786
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 1.0)
    (:scale-x (meters 1) (meters 4))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 64.0)
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -1.4222221)
    (:timer (seconds 0.14))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1787
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:fade-a -8.533334)
    (:timer (seconds 0.035))
    (:flags (bit2 bit3))
    )
  )

(defpart 1788
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:scale-x (meters 12))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:timer (seconds 0.017))
    (:flags (bit2 bit3))
    )
  )

(defpartgroup group-rolling-spawn-ring-blue
  :id 461
  :duration (seconds 0.017)
  :linger-duration (seconds 0.47)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1789 :fade-after (meters 100) :falloff-to (meters 100))
    (sp-item 1790 :flags (is-3d))
    (sp-item 1791 :flags (is-3d))
    )
  )

(defpart 1789
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 32.0)
    (:scale-x (meters 1) (meters 3))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:vel-y (meters 0.03))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:timer (seconds 0.5))
    (:flags (bit3))
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1792)
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 0))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1792
  :init-specs ((:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 0.0 63 1.0)
    (:next-time (seconds 0.067) (seconds 0.065))
    (:next-launcher 1792)
    )
  )

(defpart 1790
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 96.0 32.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1793)
    )
  )

(defpart 1793
  :init-specs ((:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1793)
    )
  )

(defpart 1791
  :init-specs ((:texture (new 'static 'texture-id :index #x4 :page #x2))
    (:num 1.0)
    (:scale-x (meters 0))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees 0))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:scalevel-x (meters 0.08))
    (:scalevel-y :copy scalevel-x)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3 left-multiply-quat))
    (:next-time (seconds 0.017))
    (:next-launcher 1794)
    )
  )

(defpart 1794
  :init-specs ((:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 32.0 32.0)
    (:next-time (seconds 0.017))
    (:next-launcher 1794)
    )
  )

(defpartgroup group-rolling-explode-ring-blue
  :id 462
  :duration (seconds 0.017)
  :linger-duration (seconds 0.5)
  :bounds (static-bspherem 0 0 0 8)
  :parts ((sp-item 1795 :fade-after (meters 100) :falloff-to (meters 100)) (sp-item 1796 :flags (is-3d)))
  )

(defpart 1795
  :init-specs ((:texture (new 'static 'texture-id :index #x12 :page #x2))
    (:num 64.0)
    (:scale-x (meters 1) (meters 1))
    (:rot-z (degrees 0) (degrees 360))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 64.0 1 64.0)
    (:b 64.0 1 64.0)
    (:a 32.0 96.0)
    (:vel-y (meters 0.1) (meters 0.033333335))
    (:rotvel-z (degrees -0.2) (degrees 0.4))
    (:fade-a -0.85333335)
    (:friction 0.9)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    (:conerot-x (degrees 0) (degrees 360))
    (:conerot-radius (meters 4.5))
    (:rotate-y (degrees 0))
    )
  )

(defpart 1796
  :init-specs ((:texture (new 'static 'texture-id :index #x1e :page #x2))
    (:num 2.0)
    (:scale-x (meters 10))
    (:rot-x (degrees 0) (degrees 360))
    (:rot-y (degrees -1) (degrees 2))
    (:rot-z (degrees 90))
    (:scale-y :copy scale-x)
    (:r 0.0)
    (:g 128.0 1 127.0)
    (:b 128.0 1 127.0)
    (:a 128.0)
    (:scalevel-x (meters 0.06666667))
    (:scalevel-y :copy scalevel-x)
    (:fade-a -0.85333335)
    (:timer (seconds 0.5))
    (:flags (bit2 bit3))
    )
  )

(defun race-ring-blue-set-particle-rotation-callback ((arg0 part-tracker))
  (let ((f0-0 (-> (the-as (pointer race-ring) (-> arg0 userdata)) 0 rot-y)))
    (set! (-> *part-id-table* 1785 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1786 init-specs 15 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1787 init-specs 4 initial-valuef) (+ -182.04445 f0-0))
    (set! (-> *part-id-table* 1788 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1789 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1790 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1791 init-specs 4 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1795 init-specs 17 initial-valuef) f0-0)
    (set! (-> *part-id-table* 1796 init-specs 4 initial-valuef) f0-0)
    )
  0
  (none)
  )

(defskelgroup *race-ring-sg* race-ring race-ring-lod0-jg race-ring-race-ring-idle-ja
              ((race-ring-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 4)
              )

(defun first-ring? ((arg0 race-ring))
  (not (-> arg0 alt-actor))
  )

(defun last-ring? ((arg0 race-ring))
  (not (-> arg0 link next))
  )

(defstate race-ring-active (race-ring)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (local-vars (v0-0 symbol))
    (case message
      (('notify)
       (when (and (= (-> block param 0) 'die) (= proc (-> self part-track process 0)))
         (cond
           ((= (-> self entity extra perm task) (game-task mount-ringrace))
            (set! (-> self part-track) (ppointer->handle (process-spawn
                                                           part-tracker
                                                           :init part-tracker-init
                                                           (-> *part-group-id-table* 460)
                                                           -1
                                                           race-ring-blue-set-particle-rotation-callback
                                                           (-> self ppointer)
                                                           #f
                                                           (-> self root trans)
                                                           :to self
                                                           )
                                                         )
                  )
            (set! v0-0 #t)
            (set! (-> self keep-part-track-alive) v0-0)
            )
           (else
             (set! (-> self part-track) (ppointer->handle (process-spawn
                                                            part-tracker
                                                            :init part-tracker-init
                                                            (-> *part-group-id-table* 457)
                                                            -1
                                                            race-ring-set-particle-rotation-callback
                                                            (-> self ppointer)
                                                            #f
                                                            (-> self root trans)
                                                            :to self
                                                            )
                                                          )
                   )
             (set! v0-0 #t)
             (set! (-> self keep-part-track-alive) v0-0)
             )
           )
         v0-0
         )
       )
      )
    )
  :enter (behavior ()
    (cond
      ((first-ring? self)
       (logior! (-> self mask) (process-mask actor-pause))
       (process-entity-status! self (entity-perm-status bit-3) #f)
       )
      (else
        (logclear! (-> self mask) (process-mask actor-pause))
        (process-entity-status! self (entity-perm-status bit-3) #t)
        )
      )
    (set! (-> self keep-part-track-alive) #f)
    (if (= (-> self entity extra perm task) (game-task mount-ringrace))
        (set! (-> self part-track) (ppointer->handle (process-spawn
                                                       part-tracker
                                                       :init part-tracker-init
                                                       (-> *part-group-id-table* 461)
                                                       -1
                                                       race-ring-blue-set-particle-rotation-callback
                                                       (-> self ppointer)
                                                       #f
                                                       (-> self root trans)
                                                       :to self
                                                       )
                                                     )
              )
        (set! (-> self part-track) (ppointer->handle (process-spawn
                                                       part-tracker
                                                       :init part-tracker-init
                                                       (-> *part-group-id-table* 458)
                                                       -1
                                                       race-ring-set-particle-rotation-callback
                                                       (-> self ppointer)
                                                       #f
                                                       (-> self root trans)
                                                       :to self
                                                       )
                                                     )
              )
        )
    (set! (-> self old-hips quad) (-> (target-pos 26) quad))
    (+! (-> self old-hips x) 1.0)
    (set! (-> self state-time) (-> *display* game-frame-counter))
    )
  :exit (behavior ()
    (sound-play "close-racering")
    (let ((a0-3 (handle->process (-> self part-track))))
      (if a0-3
          (deactivate a0-3)
          )
      )
    (if (= (-> self entity extra perm task) (game-task mount-ringrace))
        (set! (-> self part-track) (ppointer->handle (process-spawn
                                                       part-tracker
                                                       :init part-tracker-init
                                                       (-> *part-group-id-table* 462)
                                                       -1
                                                       race-ring-blue-set-particle-rotation-callback
                                                       (-> self ppointer)
                                                       #f
                                                       (-> self root trans)
                                                       :to self
                                                       )
                                                     )
              )
        (set! (-> self part-track) (ppointer->handle (process-spawn
                                                       part-tracker
                                                       :init part-tracker-init
                                                       (-> *part-group-id-table* 459)
                                                       -1
                                                       race-ring-set-particle-rotation-callback
                                                       (-> self ppointer)
                                                       #f
                                                       (-> self root trans)
                                                       :to self
                                                       )
                                                     )
              )
        )
    (cond
      ((first-ring? self)
       (logclear! (-> self mask) (process-mask actor-pause))
       (process-entity-status! self (entity-perm-status bit-3) #t)
       )
      (else
        (logior! (-> self mask) (process-mask actor-pause))
        (process-entity-status! self (entity-perm-status bit-3) #f)
        )
      )
    )
  :trans (behavior ()
    (if (nonzero? (-> self sound))
        (update! (-> self sound))
        )
    (cond
      ((handle->process (-> self part-track))
       (if (-> self keep-part-track-alive)
           (set-time! (-> (the-as part-tracker (-> self part-track process 0)) start-time))
           )
       )
      ((= (-> self entity extra perm task) (game-task mount-ringrace))
       (set! (-> self part-track) (ppointer->handle (process-spawn
                                                      part-tracker
                                                      :init part-tracker-init
                                                      (-> *part-group-id-table* 460)
                                                      -1
                                                      race-ring-blue-set-particle-rotation-callback
                                                      (-> self ppointer)
                                                      #f
                                                      (-> self root trans)
                                                      :to self
                                                      )
                                                    )
             )
       (set! (-> self keep-part-track-alive) #t)
       )
      (else
        (set! (-> self part-track) (ppointer->handle (process-spawn
                                                       part-tracker
                                                       :init part-tracker-init
                                                       (-> *part-group-id-table* 457)
                                                       -1
                                                       race-ring-set-particle-rotation-callback
                                                       (-> self ppointer)
                                                       #f
                                                       (-> self root trans)
                                                       :to self
                                                       )
                                                     )
              )
        (set! (-> self keep-part-track-alive) #t)
        )
      )
    (cond
      ((not (last-ring? self))
       )
      ((= (-> self entity extra perm task) (game-task mount-ringrace))
       (spool-push *art-control* "race-ring-second-anim" 0 self -99.0)
       )
      (else
        (spool-push *art-control* "race-ring-anim" 0 self -99.0)
        )
      )
    )
  :code (behavior ()
    (loop
      (suspend)
      (cond
        ((first-ring? self)
         )
        ((>= (- (-> *display* game-frame-counter) (-> self state-time)) (-> self timeout))
         (level-hint-spawn
           (text-id rolling-ring-chase-fail)
           "sksp0121"
           (the-as entity #f)
           *entity-pool*
           (game-task none)
           )
         (ambient-hint-spawn "st-lose" (the-as vector #f) *entity-pool* 'stinger)
         (let ((a1-2 (new 'stack-no-clear 'event-message-block)))
           (set! (-> a1-2 from) self)
           (set! (-> a1-2 num-params) 0)
           (set! (-> a1-2 message) 'activate)
           (let ((t9-3 send-event-function)
                 (v1-7 (-> self alt-actor))
                 )
             (t9-3
               (if v1-7
                   (-> v1-7 extra process)
                   )
               a1-2
               )
             )
           )
         (go race-ring-idle)
         )
        )
      (when *target*
        (let ((gp-0 (new 'stack-no-clear 'vector)))
          (set! (-> gp-0 quad) (-> self old-hips quad))
          (set! (-> self old-hips quad) (-> (target-pos 26) quad))
          (vector-! gp-0 gp-0 (-> self old-hips))
          (when (>= (ray-flat-cyl-intersect (-> self cyl) (-> self old-hips) gp-0) 0.0)
            (level-hint-spawn
              (text-id rolling-ring-chase-1-hint)
              "sksp0119"
              (the-as entity #f)
              *entity-pool*
              (game-task none)
              )
            (if (= (-> self entity extra perm task) (game-task mount-ringrace))
                (level-hint-spawn
                  (text-id rolling-ring-chase-1-hint)
                  "sksp0120"
                  (the-as entity #f)
                  *entity-pool*
                  (game-task none)
                  )
                )
            (cond
              ((first-ring? self)
               (close-specific-task! (-> self entity extra perm task) (task-status need-hint))
               (entity-birth-no-kill (-> self link next))
               (let ((a1-9 (new 'stack-no-clear 'event-message-block)))
                 (set! (-> a1-9 from) self)
                 (set! (-> a1-9 num-params) 0)
                 (set! (-> a1-9 message) 'activate)
                 (let ((t9-12 send-event-function)
                       (v1-30 (-> self link next))
                       )
                   (t9-12
                     (if v1-30
                         (-> v1-30 extra process)
                         )
                     a1-9
                     )
                   )
                 )
               )
              ((last-ring? self)
               (let ((gp-2 (ppointer->handle (process-spawn othercam self 4 #f #t :to self)))
                     (s5-2 (ppointer->handle (process-spawn
                                               fuel-cell
                                               :init fuel-cell-init-as-clone
                                               (process->handle self)
                                               (-> self entity extra perm task)
                                               :to self
                                               )
                                             )
                           )
                     )
                 (if *target*
                     (logior! (-> *target* mask) (process-mask sleep))
                     )
                 (close-specific-task! (-> self entity extra perm task) (task-status need-reminder))
                 (logclear! (-> self draw status) (draw-status hidden))
                 (logior! (-> self draw status) (draw-status skip-bones))
                 (if (= (-> self entity extra perm task) (game-task mount-ringrace))
                    (birth-pickup-at-point
                    (-> *target* control trans)
                    (pickup-type fuel-cell)
                    (the float (-> self entity extra perm task))
                    #f
                    self
                    (the-as fact-info #f)
                  ))

                 (logclear! (-> self draw status) (draw-status skip-bones))
                 (logior! (-> self draw status) (draw-status hidden))
                 (cond
                   ((handle->process (the-as int gp-2))
                    (deactivate (-> gp-2 process 0))
                    )
                   (else
                     )
                   )
                 (if *target*
                     (logclear! (-> *target* mask) (process-mask sleep))
                     )
                 (let ((a0-54 (handle->process s5-2)))
                   (if a0-54
                       (send-event a0-54 'stop-cloning)
                       )
                   )
                 )
               )
              (else
                (entity-birth-no-kill (-> self link next))
                (let ((a1-22 (new 'stack-no-clear 'event-message-block)))
                  (set! (-> a1-22 from) self)
                  (set! (-> a1-22 num-params) 0)
                  (set! (-> a1-22 message) 'activate)
                  (let ((t9-26 send-event-function)
                        (v1-86 (-> self link next))
                        )
                    (t9-26
                      (if v1-86
                          (-> v1-86 extra process)
                          )
                      a1-22
                      )
                    )
                  )
                )
              )
            (go race-ring-idle)
            )
          )
        )
      )
    )
  :post ja-post
  )

(defstate race-ring-wait (race-ring)
  :code (behavior ()
    (if (nonzero? (-> self sound))
        (stop! (-> self sound))
        )
    (loop
      (suspend)
      (when (= (get-task-status (the-as game-task (-> self alt-task))) (task-status invalid))
        (close-specific-task! (-> self entity extra perm task) (task-status need-hint))
        (logclear! (-> self mask) (process-mask actor-pause))
        (go race-ring-active)
        )
      )
    )
  )

(defstate race-ring-idle (race-ring)
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('activate)
       (logclear! (-> self mask) (process-mask actor-pause))
       (go race-ring-active)
       )
      )
    )
  :code (behavior ()
    (if (nonzero? (-> self sound))
        (stop! (-> self sound))
        )
    (loop
      (suspend)
      )
    )
  )

(defmethod init-from-entity! ((this race-ring) (arg0 entity-actor))
  (let ((a0-1 arg0))
    (if (not (entity-actor-lookup a0-1 'next-actor 0))
        (stack-size-set! (-> this main-thread) 512)
        )
    )
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this *race-ring-sg* '())
  (set! (-> this root pause-adjust-distance) 122880.0)
  (set! (-> this link) (new 'process 'actor-link-info this))
  (set! (-> this part-track) (the-as handle #f))
  (set! (-> this alt-actor) (entity-actor-lookup arg0 'alt-actor 0))
  (logior! (-> this draw status) (draw-status hidden))
  (set! (-> this sound)
        (new 'process 'ambient-sound (static-sound-spec "loop-racering" :fo-max 40) (-> this root trans))
        )
  (let ((f0-1 (res-lump-float arg0 'timeout)))
    (set! (-> this timeout) (the-as time-frame (the int (* 300.0 f0-1))))
    )
  (let ((s4-0 (new 'stack-no-clear 'vector)))
    (cond
      ((-> this link next)
       (vector-! (-> this face-vec) (-> this link next extra trans) (-> this root trans))
       )
      ((-> this link prev)
       (vector-! (-> this face-vec) (-> this root trans) (-> this link prev extra trans))
       )
      )
    (vector-flatten! (-> this face-vec) (-> this face-vec) (new 'static 'vector :y 1.0))
    (vector-normalize! (-> this face-vec) 1.0)
    (cond
      ((and (-> this link next) (-> this link prev))
       (vector-! s4-0 (-> this link prev extra trans) (-> this root trans))
       (vector-flatten! s4-0 s4-0 (new 'static 'vector :y 1.0))
       (vector-normalize! s4-0 1.0)
       (vector+! s4-0 s4-0 (-> this face-vec))
       (vector-normalize! s4-0 1.0)
       (set! (-> this rot-y) (acos (vector-dot s4-0 (new 'static 'vector :z 1.0))))
       (if (< (vector-dot s4-0 (new 'static 'vector :x 1.0)) 0.0)
           (set! (-> this rot-y) (- (-> this rot-y)))
           )
       )
      (else
        (set! (-> this rot-y) (acos (vector-dot (-> this face-vec) (new 'static 'vector :z 1.0))))
        (if (< (vector-dot (-> this face-vec) (new 'static 'vector :x 1.0)) 0.0)
            (set! (-> this rot-y) (- (-> this rot-y)))
            )
        (+! (-> this rot-y) 16384.0)
        )
      )
    )
  (+! (-> this rot-y) (res-lump-float arg0 'rotoffset))
  (set-vector! (-> this cyl axis) (cos (-> this rot-y)) 0.0 (- (sin (-> this rot-y))) 1.0)
  (vector+float*! (the-as vector (-> this cyl)) (-> this root trans) (-> this cyl axis) -2048.0)
  (set! (-> this cyl radius) 24576.0)
  (set! (-> this cyl length) 4096.0)
  (cond
    ((and (first-ring? this)
          (!= (get-task-status (-> this entity extra perm task)) (task-status invalid))
          (!= (get-task-status (-> this entity extra perm task)) 7)
          )
     (set! (-> this alt-task) (res-lump-value (-> this entity) 'alt-task uint))
     (if (or (= (-> this alt-task) 0)
             (= (get-task-status (the-as game-task (-> this alt-task))) (task-status invalid))
             )
         (go race-ring-active)
         (go race-ring-wait)
         )
     )
    ((and (last-ring? this) (= (get-task-status (-> this entity extra perm task)) (task-status need-resolution)))
     (let ((s5-2 (new 'stack-no-clear 'vector)))
       (logclear! (-> this draw status) (draw-status hidden))
       (ja-post)
       (vector<-cspace! s5-2 (-> this node-list data 5))
       (logior! (-> this draw status) (draw-status hidden))
       (birth-pickup-at-point
         s5-2
         (pickup-type fuel-cell)
         (the float (-> this entity extra perm task))
         #f
         this
         (the-as fact-info #f)
         )
       )
     )
    ((and (last-ring? this) (!= (get-task-status (-> this entity extra perm task)) (task-status invalid)))
     )
    )
  (set! (-> this event-hook) (-> race-ring-idle event))
  (go race-ring-idle)
  (none)
  )


;; mount fog ;;
(defpartgroup group-mount-fog-cloud
  :id 760 ;; id changed to test for crashes
  :bounds (static-bspherem 0 300.5 0 300.5)
  :parts
  ((sp-item 3972 :fade-after (meters 175) :falloff-to (meters 175) :period (seconds 5) :length (seconds 10))
   (sp-item 3972 :fade-after (meters 175) :falloff-to (meters 175) :period (seconds 9.76) :length (seconds 10.2))
   (sp-item 3972 :fade-after (meters 175) :falloff-to (meters 175) :period (seconds 15.34) :length (seconds 10.6))
   (sp-item 3973 :fade-after (meters 125) :falloff-to (meters 125) :period (seconds 10.6) :length (seconds 10.15))))

(defpart 3972
  :init-specs
  ((:texture (middot effects))
   (:num 4.0 4.0)
   (:y (meters 0.5) (meters 2))
   (:scale-x (meters 16))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 192.0)
   (:g 192.0)
   (:b 192.0 32.0)
   (:a 150.0)
   (:vel-y (meters 0.0) (meters 0.00))
   (:scalevel-x (meters 0.0048828125))
   (:rotvel-z (degrees -0.1) (degrees 0.2))
   (:scalevel-y :copy scalevel-x)
   (:fade-a -0.21333334)
   (:accel-y (meters 0.000))
   (:friction 0.996)
   (:timer (seconds 4) (seconds 3.5))
   (:flags (bit2 bit12 bit14))
   (:conerot-x (degrees 90))
   (:conerot-y (degrees 0) (degrees 360))
   (:conerot-radius (meters 0) (meters 200))))

(defpart 3973
  :init-specs
  ((:texture (middot effects))
   (:num 2.0 4.0)
   (:y (meters 0.5) (meters 2))
   (:scale-x (meters 16))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:r 192.0)
   (:g 192.0)
   (:b 192.0 32.0)
   (:a 150.0)
   (:vel-y (meters 0.0) (meters 0.00))
   (:scalevel-x (meters 0.0048828125))
   (:rotvel-z (degrees -0.1) (degrees 0.2))
   (:scalevel-y :copy scalevel-x)
   (:fade-a -0.10666667)
   (:accel-y (meters 0.000))
   (:friction 0.993)
   (:timer (seconds 4) (seconds 3.5))
   (:flags (bit2 bit12 bit14))
   (:conerot-x (degrees 90))
   (:conerot-y (degrees 0) (degrees 360))
   (:conerot-radius (meters 0) (meters 200))))


;; butterflies ;;

(defpartgroup group-mount-butterflies
  :id 770 ;; id changed to test for crashes
  :bounds (static-bspherem 0 0 0 30)
  :parts
  ((sp-item 3380
            :fade-after (meters 120)
            :period (seconds 16.345)
            :length (seconds 0.017)
            :hour-mask #b111111100000000000111111
            :binding 3381)
   (sp-item 3380
            :fade-after (meters 120)
            :period (seconds 22.125)
            :length (seconds 0.017)
            :hour-mask #b111111100000000000111111
            :binding 3381)
   (sp-item 3380
            :fade-after (meters 120)
            :period (seconds 32.82)
            :length (seconds 0.017)
            :hour-mask #b111111100000000000111111
            :binding 3381)
   (sp-item 3381 :flags (start-dead launch-asap) :binding 3382)
   (sp-item 3382 :flags (is-3d start-dead))
   (sp-item 3381 :flags (start-dead launch-asap) :binding 3382)
   (sp-item 3382 :flags (is-3d start-dead))
   (sp-item 3381 :flags (start-dead launch-asap) :binding 3382)
   (sp-item 3382 :flags (is-3d start-dead))
   (sp-item 3381 :flags (start-dead launch-asap) :binding 3382)
   (sp-item 3382 :flags (is-3d start-dead))
   (sp-item 3381 :flags (start-dead launch-asap) :binding 3382)
   (sp-item 3382 :flags (is-3d start-dead))))

(defpart 3380
  :init-specs
  ((:texture (hotdot effects))
   (:num 1.0)
   (:x (meters 0) (meters 7.5))
   (:y (meters 14) (meters 3))
   (:scale-x (meters 1))
   (:scale-y :copy scale-x)
   (:r 128.0)
   (:a 0.0)
   (:vel-y (meters -0.036666665))
   (:accel-y (meters 0.00033333333))
   (:timer (seconds 20))
   (:flags (bit3))
   (:next-time (seconds 1.85))
   (:next-launcher 3383)
   (:rotate-y (degrees 0) (degrees 360))))

(defpart 3383
  :init-specs ((:accel-y (meters 0)) (:next-time (seconds 9) (seconds 4.997)) (:next-launcher 3384)))

(defpart 3384
  :init-specs ((:accel-y (meters 0.00033333333))))

(defpart 3381
  :init-specs
  ((:texture (hotdot effects))
   (:num 1.0)
   (:x (meters 0) (meters 16))
   (:y (meters 0) (meters 16))
   (:z (meters 3) (meters 1))
   (:scale-x (meters 0.1))
   (:rot-z (degrees 0) (degrees 360))
   (:scale-y :copy scale-x)
   (:g 0.0 256.0)
   (:b 128.0 1 128.0)
   (:a 0.0)
   (:omega 0.0 65536.0)
   (:vel-x (meters -0.017777778) (meters 0.035555556))
   (:vel-y (meters -0.0074074077) (meters 0.0148148155))
   (:vel-z (meters 0))
   (:timer (seconds 20))
   (:flags (bit3 bit7))
   (:next-time (seconds 0.5) (seconds 1.497))
   (:next-launcher 3385)))

(defpart 3385
  :init-specs
  ((:vel-x (meters -0.017777778) (meters 0.035555556))
   (:vel-y (meters -0.0074074077) (meters 0.0148148155))
   (:rotvel-z (degrees -0.2) (degrees 0.4))
   (:next-time (seconds 0.5) (seconds 1.497))
   (:next-launcher 3385)))

(defpart 3382
  :init-specs
  ((:texture (butterfly-wing effects))
   (:birth-func 'birth-func-copy-rot-color)
   (:num 2.0)
   (:scale-x (meters 0.9))
   (:rot-x (degrees -60) (degrees 300))
   (:scale-y (meters 1.3))
   (:r 255.0)
   (:g 255.0)
   (:b 255.0)
   (:a 128.0)
   (:fade-a -8.0)
   (:timer (seconds 0.035))
   (:flags (bit2 bit9 bit12))))


;; butterfly sitting ;;
(defpartgroup group-mount-butterfly-sitting
  :id 133
  :bounds (static-bspherem 0 0.2 0 0.5)
  :parts
  ((sp-item 3420 :fade-after (meters 60) :flags (is-3d bit1) :period (seconds 2) :length (seconds 0.017))
   (sp-item 3421 :fade-after (meters 60) :flags (is-3d bit1) :period (seconds 2) :length (seconds 0.017))))

(defpart 3420
  :init-specs
  ((:texture (butterfly-wing effects))
   (:num 1.0)
   (:y (meters 0.05))
   (:scale-x (meters 0.9))
   (:rot-x (degrees 100.00001))
   (:rot-y (degrees 72.5))
   (:scale-y (meters 1.3))
   (:r 0.0)
   (:g 128.0)
   (:b 255.0)
   (:a 128.0)
   (:rotvel-x (degrees 0.33333334))
   (:timer (seconds 2))
   (:flags (bit2 bit9 bit12 left-multiply-quat))
   (:next-time (seconds 1))
   (:next-launcher 3422)))

(defpart 3422
  :init-specs ((:rotvel-x (degrees -0.31666666))))

(defpart 3421
  :init-specs
  ((:texture (butterfly-wing effects))
   (:num 1.0)
   (:y (meters 0.05))
   (:scale-x (meters 0.9))
   (:rot-x (degrees 80))
   (:rot-y (degrees 72.5))
   (:scale-y (meters 1.3))
   (:r 0.0)
   (:g 128.0)
   (:b 255.0)
   (:a 128.0)
   (:rotvel-x (degrees -0.33333334))
   (:timer (seconds 2))
   (:flags (bit2 bit9 bit12 left-multiply-quat))
   (:next-time (seconds 1))
   (:next-launcher 3423)))

(defpart 3423
  :init-specs ((:rotvel-x (degrees 0.31666666))))

;; humming birb ;;
(defpartgroup group-mount-hummingbird
  :id 129
  :bounds (static-bspherem 0 3 0 4)
  :parts
  ((sp-item 3390
            :fade-after (meters 20)
            :flags (is-3d bit1)
            :period (seconds 20)
            :length (seconds 0.017)
            :hour-mask #b111111100000000000111111)
   (sp-item 3391 :fade-after (meters 20) :flags (is-3d bit1) :period (seconds 20) :length (seconds 0.017))
   (sp-item 3392 :fade-after (meters 20) :flags (is-3d bit1) :period (seconds 20) :length (seconds 0.017))
   (sp-item 3393 :fade-after (meters 20) :flags (is-3d bit1) :period (seconds 20) :length (seconds 0.017))
   (sp-item 3394 :fade-after (meters 20) :flags (is-3d bit1) :period (seconds 20) :length (seconds 0.017))
   (sp-item 3395 :fade-after (meters 20) :flags (is-3d bit1) :period (seconds 20) :length (seconds 0.017))))

(defpart 3390
  :init-specs
  ((:texture (hummingbird-body effects))
   (:num 1.0)
   (:scale-x (meters 0.5))
   (:rot-x (degrees 90))
   (:scale-y (meters 0.5) (meters 0.1))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 96.0 1 16.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 2.75))
   (:flags (bit2 bit9 bit12 left-multiply-quat))
   (:next-time (seconds 0.017))
   (:next-launcher 3396)))

(defpart 3396
  :init-specs ((:scale-y (meters 0.5) (meters 0.1)) (:a 96.0 1 16.0) (:next-time (seconds 0.017)) (:next-launcher 396)))

(defpart 3391
  :init-specs
  ((:texture (hummingbird-body effects))
   (:num 1.0)
   (:scale-x (meters 0.5))
   (:rot-x (degrees 90))
   (:scale-y (meters 0.5) (meters 0.1))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 0.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 6))
   (:flags (bit9 bit12 left-multiply-quat))
   (:next-time (seconds 2.75))
   (:next-launcher 3397)))

(defpart 3397
  :init-specs
  ((:scale-y (meters 0.5) (meters 0.1))
   (:a 96.0 1 16.0)
   (:accel-x (meters 0.00066666666))
   (:accel-y (meters 0.00033333333))
   (:next-time (seconds 0.017))
   (:next-launcher 3398)))

(defpart 3398
  :init-specs ((:scale-y (meters 0.5) (meters 0.1)) (:a 96.0 1 16.0) (:next-time (seconds 0.017)) (:next-launcher 398)))

(defpart 3392
  :init-specs
  ((:texture (hummingbird-wing effects))
   (:num 2.0)
   (:scale-x (meters 1))
   (:rot-x (degrees 135))
   (:rot-y (degrees 90))
   (:rot-z (degrees 60))
   (:scale-y (meters 0.5))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 32.0 1 32.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 2.75))
   (:flags (bit2 bit9 bit12))
   (:next-time (seconds 0.017))
   (:next-launcher 3399)))

(defpart 3399
  :init-specs
  ((:rot-x (degrees 135))
   (:rot-y (degrees 90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:next-time (seconds 0.017))
   (:next-launcher 3399)))

(defpart 3393
  :init-specs
  ((:texture (hummingbird-wing effects))
   (:num 2.0)
   (:scale-x (meters 1))
   (:rot-x (degrees 135))
   (:rot-y (degrees 90))
   (:rot-z (degrees 60))
   (:scale-y (meters 0.5))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 0.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 6))
   (:flags (bit9 bit12))
   (:next-time (seconds 2.75))
   (:next-launcher 3400)))

(defpart 3400
  :init-specs
  ((:rot-x (degrees 135))
   (:rot-y (degrees 90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:accel-x (meters 0.00066666666))
   (:accel-y (meters 0.00033333333))
   (:next-time (seconds 0.017))
   (:next-launcher 3401)))

(defpart 3401
  :init-specs
  ((:rot-x (degrees 135))
   (:rot-y (degrees 90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:next-time (seconds 0.017))
   (:next-launcher 3401)))

(defpart 3394
  :init-specs
  ((:texture (hummingbird-wing effects))
   (:num 2.0)
   (:scale-x (meters 1))
   (:rot-x (degrees 45))
   (:rot-y (degrees -90))
   (:scale-y (meters 0.5))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 32.0 1 32.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 2.75))
   (:flags (bit2 bit9 bit12))
   (:next-time (seconds 0.017))
   (:next-launcher 3402)))

(defpart 3402
  :init-specs
  ((:rot-x (degrees 45))
   (:rot-y (degrees -90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:next-time (seconds 0.017))
   (:next-launcher 3402)))

(defpart 3395
  :init-specs
  ((:texture (hummingbird-wing effects))
   (:num 2.0)
   (:scale-x (meters 1))
   (:rot-x (degrees 45))
   (:rot-y (degrees -90))
   (:rot-z (degrees 60))
   (:scale-y (meters 0.5))
   (:r 128.0)
   (:g 128.0)
   (:b 128.0)
   (:a 0.0)
   (:vel-x (meters 0.0024242424))
   (:vel-y (meters 0.02))
   (:accel-y (meters -0.00016666666))
   (:timer (seconds 6))
   (:flags (bit9 bit12))
   (:next-time (seconds 2.75))
   (:next-launcher 3403)))

(defpart 3403
  :init-specs
  ((:rot-x (degrees 45))
   (:rot-y (degrees -90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:accel-x (meters 0.00066666666))
   (:accel-y (meters 0.00033333333))
   (:next-time (seconds 0.017))
   (:next-launcher 3404)))

(defpart 3404
  :init-specs
  ((:rot-x (degrees 45))
   (:rot-y (degrees -90))
   (:rot-z (degrees -70) (degrees 140))
   (:a 32.0 1 32.0)
   (:next-time (seconds 0.017))
   (:next-launcher 3404)))